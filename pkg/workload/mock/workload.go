// Code generated by MockGen. DO NOT EDIT.
// Source: workload.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	workload "github.com/victor_diditskiy/replication_experiment/pkg/workload"
)

// MockWorkload is a mock of Workload interface.
type MockWorkload struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadMockRecorder
}

// MockWorkloadMockRecorder is the mock recorder for MockWorkload.
type MockWorkloadMockRecorder struct {
	mock *MockWorkload
}

// NewMockWorkload creates a new mock instance.
func NewMockWorkload(ctrl *gomock.Controller) *MockWorkload {
	mock := &MockWorkload{ctrl: ctrl}
	mock.recorder = &MockWorkloadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkload) EXPECT() *MockWorkloadMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockWorkload) Start(ctx context.Context, conf workload.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockWorkloadMockRecorder) Start(ctx, conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWorkload)(nil).Start), ctx, conf)
}

// Stop mocks base method.
func (m *MockWorkload) Stop(conf workload.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", conf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockWorkloadMockRecorder) Stop(conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorkload)(nil).Stop), conf)
}
